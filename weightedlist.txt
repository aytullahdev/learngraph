class Node{
public:
     string name;
     list<string> nbrs;
     Node(string name){
          this->name=name;

     }
};
//Graph
class Graph{
      unordered_map<string,Node*>m;
 public:
     Graph(vector<string> cities){
          for(auto x: cities){
               m[x]= new Node(x);
          }
     }
     void addEdge(string x,string y,bool undir = true){
          m[x]->nbrs.push_back(y);
          if(undir){
               m[y]->nbrs.push_back(x);
          }
     }
     void printAdjList(){
          for(auto cityPair: m){
               auto city = cityPair.first;
               Node* node = cityPair.second;
               cout<<city<<"----> ";
               for(auto x: node->nbrs){
                    cout<<x<<" , ";

               }
               cout<<nline;
          }
     }


};
void solve(){
     int n,e;
     cin>>n>>e;
     vector<string>cities;
     for(int i=0;i<n;i++){
          string inp;
          cin>>inp;
          cities.pb(inp);
     }
     Graph g(cities);
     while(e--){
          string a,b;
          cin>>a>>b;
          g.addEdge(a,b);
     }
     g.printAdjList();
     
}
//end solution