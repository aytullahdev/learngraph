#include<bits/stdc++.h>
using namespace std;
//fast I/o;
void fastIO(){
     ios_base::sync_with_stdio(false);
     cin.tie(NULL);

}
void init_code(){
    fastIO();
     #ifdef EPSILON
    freopen("input.txt","r",stdin);
    freopen("output.txt","w",stdout);
     #endif

}
//solution
int m,n;
int dfs(vector<vector<int>> &matrix,vector<vector<bool>> &visited,int i,int j){
     visited[i][j]=true;
     int dx[]={1,-1,0,0};
     int dy[]={0,0,1,-1};
     int res=1;
     for(int k=0;k<4;k++){
          int nx=i+dx[k];
          int ny=j+dy[k];
          if(nx>=0 && nx<m && ny>=0 && ny<n && matrix[nx][ny]==1 && !visited[nx][ny]){
               int subres = dfs(matrix,visited,nx,ny);
               res+=subres;
          }
     }
     return res;
}

int longest_path(vector<vector<int>> &matrix){
     vector<vector<bool>> visited(m,vector<bool>(n,false));
     int largest=0;
     for(int i=0;i<m;i++){
          for(int j=0;j<n;j++){
               if(matrix[i][j]==1 && !visited[i][j]){
                   int res = dfs(matrix,visited,i,j);
                    if(res>largest){
                         largest=res;
                    }
               }
          }
          
     }
     return largest;
       
}


int main(){
     init_code();
     cin>>m>>n;
     vector<vector<int>> matrix(m,vector<int>(n,0));
     for(int i=0;i<m;i++){
          for(int j=0;j<n;j++){
               int inp;
               cin>>inp;
              matrix[i][j]=inp;
          }
     }

    
    int ans = longest_path(matrix);
    cout<<ans<<endl;

    
   





     return 0;
}
// 5 5
// 1 0 0 1 0
// 1 1 0 1 0
// 0 1 1 0 0
// 0 1 1 1 0
// 0 1 1 0 0